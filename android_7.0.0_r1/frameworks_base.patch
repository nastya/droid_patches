
project frameworks/base/
diff --git a/api/current.txt b/api/current.txt
index 4f12ad4..712ce02 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -3429,6 +3429,7 @@ package android.app {
     method public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
     method public boolean dispatchTouchEvent(android.view.MotionEvent);
     method public boolean dispatchTrackballEvent(android.view.MotionEvent);
+    method public void droidboxCheckPhoneCall(android.content.Intent);
     method public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
     method public void enterPictureInPictureMode();
     method public android.view.View findViewById(int);
@@ -48693,6 +48694,15 @@ package dalvik.system {
     method public static dalvik.system.DexFile loadDex(java.lang.String, java.lang.String, int) throws java.io.IOException;
   }
 
+  public final class Helper {
+    ctor public Helper();
+    method public static int getFdId(java.io.FileDescriptor);
+    method public static boolean log(java.lang.String);
+    method public static void logPathFromFd(java.io.FileDescriptor, int);
+    method public static java.lang.String toHex(byte[]);
+    field public static final int dataBytesToLog = 100; // 0x64
+  }
+
   public class PathClassLoader extends dalvik.system.BaseDexClassLoader {
     ctor public PathClassLoader(java.lang.String, java.lang.ClassLoader);
     ctor public PathClassLoader(java.lang.String, java.lang.String, java.lang.ClassLoader);
diff --git a/api/system-current.txt b/api/system-current.txt
index d1c0394..3874b9d 100644
--- a/api/system-current.txt
+++ b/api/system-current.txt
@@ -3556,6 +3556,7 @@ package android.app {
     method public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
     method public boolean dispatchTouchEvent(android.view.MotionEvent);
     method public boolean dispatchTrackballEvent(android.view.MotionEvent);
+    method public void droidboxCheckPhoneCall(android.content.Intent);
     method public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
     method public void enterPictureInPictureMode();
     method public android.view.View findViewById(int);
@@ -52050,6 +52051,15 @@ package dalvik.system {
     method public static dalvik.system.DexFile loadDex(java.lang.String, java.lang.String, int) throws java.io.IOException;
   }
 
+  public final class Helper {
+    ctor public Helper();
+    method public static int getFdId(java.io.FileDescriptor);
+    method public static boolean log(java.lang.String);
+    method public static void logPathFromFd(java.io.FileDescriptor, int);
+    method public static java.lang.String toHex(byte[]);
+    field public static final int dataBytesToLog = 100; // 0x64
+  }
+
   public class PathClassLoader extends dalvik.system.BaseDexClassLoader {
     ctor public PathClassLoader(java.lang.String, java.lang.ClassLoader);
     ctor public PathClassLoader(java.lang.String, java.lang.String, java.lang.ClassLoader);
diff --git a/api/test-current.txt b/api/test-current.txt
index a70e9e3..2e6d205 100644
--- a/api/test-current.txt
+++ b/api/test-current.txt
@@ -3429,6 +3429,7 @@ package android.app {
     method public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
     method public boolean dispatchTouchEvent(android.view.MotionEvent);
     method public boolean dispatchTrackballEvent(android.view.MotionEvent);
+    method public void droidboxCheckPhoneCall(android.content.Intent);
     method public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
     method public void enterPictureInPictureMode();
     method public android.view.View findViewById(int);
@@ -48773,6 +48774,15 @@ package dalvik.system {
     method public static dalvik.system.DexFile loadDex(java.lang.String, java.lang.String, int) throws java.io.IOException;
   }
 
+  public final class Helper {
+    ctor public Helper();
+    method public static int getFdId(java.io.FileDescriptor);
+    method public static boolean log(java.lang.String);
+    method public static void logPathFromFd(java.io.FileDescriptor, int);
+    method public static java.lang.String toHex(byte[]);
+    field public static final int dataBytesToLog = 100; // 0x64
+  }
+
   public class PathClassLoader extends dalvik.system.BaseDexClassLoader {
     ctor public PathClassLoader(java.lang.String, java.lang.ClassLoader);
     ctor public PathClassLoader(java.lang.String, java.lang.String, java.lang.ClassLoader);
diff --git a/compiled-classes-phone b/compiled-classes-phone
index 221d687..aa8f9b3 100644
--- a/compiled-classes-phone
+++ b/compiled-classes-phone
@@ -6399,6 +6399,7 @@ dalvik.system.VMDebug
 dalvik.system.VMRuntime
 dalvik.system.VMStack
 dalvik.system.ZygoteHooks
+dalvik.system.Helper
 java.beans.ChangeListenerMap
 java.beans.PropertyChangeEvent
 java.beans.PropertyChangeListener
diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index ae3e0ce..4e1eb32 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -128,6 +128,8 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 
+import dalvik.system.Helper;
+
 /**
  * An activity is a single, focused thing that the user can do.  Almost all
  * activities interact with the user, so the Activity class takes care of
@@ -4219,6 +4221,7 @@ public class Activity extends ContextThemeWrapper
      */
     public void startActivityForResult(@RequiresPermission Intent intent, int requestCode,
             @Nullable Bundle options) {
+        droidboxCheckPhoneCall(intent);
         if (mParent == null) {
             Instrumentation.ActivityResult ar =
                 mInstrumentation.execStartActivity(
@@ -4280,6 +4283,7 @@ public class Activity extends ContextThemeWrapper
      */
     public void startActivityForResultAsUser(Intent intent, int requestCode,
             @Nullable Bundle options, UserHandle user) {
+        droidboxCheckPhoneCall(intent);
         if (mParent != null) {
             throw new RuntimeException("Can't be called from a child");
         }
@@ -4315,6 +4319,7 @@ public class Activity extends ContextThemeWrapper
      * @hide Implement to provide correct calling token.
      */
     public void startActivityAsUser(Intent intent, Bundle options, UserHandle user) {
+        droidboxCheckPhoneCall(intent);
         if (mParent != null) {
             throw new RuntimeException("Can't be called from a child");
         }
@@ -4347,6 +4352,7 @@ public class Activity extends ContextThemeWrapper
      */
     public void startActivityAsCaller(Intent intent, @Nullable Bundle options,
             boolean ignoreTargetSecurity, int userId) {
+        droidboxCheckPhoneCall(intent);
         if (mParent != null) {
             throw new RuntimeException("Can't be called from a child");
         }
@@ -4430,6 +4436,7 @@ public class Activity extends ContextThemeWrapper
             Intent fillInIntent, int flagsMask, int flagsValues,
             Bundle options)
             throws IntentSender.SendIntentException {
+        droidboxCheckPhoneCall(fillInIntent);
         try {
             String resolvedType = null;
             if (fillInIntent != null) {
@@ -4458,6 +4465,15 @@ public class Activity extends ContextThemeWrapper
             mStartedActivity = true;
         }
     }
+    
+    public void droidboxCheckPhoneCall(Intent intent) {
+    	String action = intent.getAction();
+		if (action != null && action.equals("android.intent.action.CALL")) {
+			String[] number = intent.getData().toString().split("tel:");
+			Helper.log("DroidBox: { \"PhoneCall\": { \"number\": \"" + number[1] + "\" } }");
+		}
+	}
+
 
     /**
      * Same as {@link #startActivity(Intent, Bundle)} with no options
@@ -4548,6 +4564,9 @@ public class Activity extends ContextThemeWrapper
      */
     @Override
     public void startActivities(Intent[] intents, @Nullable Bundle options) {
+        for (Intent intent : intents) {
+            droidboxCheckPhoneCall(intent);
+        }
         mInstrumentation.execStartActivities(this, mMainThread.getApplicationThread(),
                 mToken, this, intents, options);
     }
@@ -4667,6 +4686,7 @@ public class Activity extends ContextThemeWrapper
                 }
                 intent.migrateExtraStreamToClipData();
                 intent.prepareToLeaveProcess(this);
+                droidboxCheckPhoneCall(intent);
                 result = ActivityManagerNative.getDefault()
                     .startActivity(mMainThread.getApplicationThread(), getBasePackageName(),
                             intent, intent.resolveTypeIfNeeded(getContentResolver()), mToken,
@@ -4734,6 +4754,7 @@ public class Activity extends ContextThemeWrapper
      */
     public boolean startNextMatchingActivity(@RequiresPermission @NonNull Intent intent,
             @Nullable Bundle options) {
+        droidboxCheckPhoneCall(intent);
         if (mParent == null) {
             try {
                 intent.migrateExtraStreamToClipData();
@@ -4789,6 +4810,7 @@ public class Activity extends ContextThemeWrapper
      */
     public void startActivityFromChild(@NonNull Activity child, @RequiresPermission Intent intent,
             int requestCode, @Nullable Bundle options) {
+        droidboxCheckPhoneCall(intent);
         Instrumentation.ActivityResult ar =
             mInstrumentation.execStartActivity(
                 this, mMainThread.getApplicationThread(), mToken, child,
@@ -4850,6 +4872,7 @@ public class Activity extends ContextThemeWrapper
     @Override
     public void startActivityForResult(
             String who, Intent intent, int requestCode, @Nullable Bundle options) {
+        droidboxCheckPhoneCall(intent);
         Uri referrer = onProvideReferrer();
         if (referrer != null) {
             intent.putExtra(Intent.EXTRA_REFERRER, referrer);
diff --git a/core/java/android/content/ContextWrapper.java b/core/java/android/content/ContextWrapper.java
index 60da63e..6a43a4e 100644
--- a/core/java/android/content/ContextWrapper.java
+++ b/core/java/android/content/ContextWrapper.java
@@ -43,6 +43,8 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
+import dalvik.system.Helper;
+
 /**
  * Proxying implementation of Context that simply delegates all of its calls to
  * another Context.  Can be subclassed to modify behavior without changing
@@ -610,6 +612,11 @@ public class ContextWrapper extends Context {
 
     @Override
     public ComponentName startService(Intent service) {
+        if (service.getComponent() != null)
+        {
+            String serviceName = service.getComponent().getClassName();
+            Helper.log("DroidBox: { \"ServiceStart\": { \"name\": \"" + serviceName + "\" } }");
+        }
         return mBase.startService(service);
     }
 
@@ -621,6 +628,12 @@ public class ContextWrapper extends Context {
     /** @hide */
     @Override
     public ComponentName startServiceAsUser(Intent service, UserHandle user) {
+        if (service.getComponent() != null)
+        {
+            String serviceName = service.getComponent().getClassName();
+            Helper.log("DroidBox: { \"ServiceStart\": { \"name\": \"" + serviceName + "\" } }");
+        }
+
         return mBase.startServiceAsUser(service, user);
     }
 
diff --git a/preloaded-classes b/preloaded-classes
index fe2fba5..010066c 100644
--- a/preloaded-classes
+++ b/preloaded-classes
@@ -2898,6 +2898,7 @@ dalvik.system.VMDebug
 dalvik.system.VMRuntime
 dalvik.system.VMStack
 dalvik.system.ZygoteHooks
+dalvik.system.Helper
 java.beans.ChangeListenerMap
 java.beans.PropertyChangeEvent
 java.beans.PropertyChangeListener
